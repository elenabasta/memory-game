{"version":3,"sources":["node_modules/ez-read/ez-read.js","model.js","flip-card.js","check-match.js","index.js"],"names":["front1","require","front2","front3","front4","front5","back","cardContainer","document","querySelector","newGameButton","scoreBoard","winMessage","cardFrontArray","shuffledCardFronts","maybeFlip","cardId","cardNum","source","console","log","flipCard","src","maybeCheckMatch","lastTwoSources","length","checkForMatch","isMatch","addEventListener","runGame","resetGame","lastTwoIds","score","event","target","id","Number","push","runMatchLogic","innerHTML","updateDisplayScore","clearTwoArrays","resetlastTwoCards","card1","card2","setTimeout","resetCards","i"],"mappings":"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","file":"mgame.3d8b1990.js","sourceRoot":"..","sourcesContent":["'use strict'\r\n\r\nconst ezRead = {\r\n  any: function(callback, array) {\r\n    if (typeof callback === 'function' && Array.isArray(array)) {\r\n      return array.some(callback);\r\n    }\r\n    else {\r\n      return `Expected: (function, array)\\n Actual: (${typeof callback}, ${typeof array})`;\r\n    }\r\n    \r\n  },\r\n\r\n  average: function(arr) {\r\n    const summedArray =  arr.reduce((acc, current) => acc + current, 0);\r\n    const result = summedArray / arr.length;\r\n    return result;\r\n  },\r\n\r\n  cond: function(...args) {\r\n    for (let i = 0; i < args.length; i++) {\r\n      if (i % 2 === 0) {\r\n        if (i === args.length - 1 && (typeof args[i] === 'function')) {\r\n          return args[i]();\r\n        } \r\n        else if (i === args.length - 1) {\r\n          return args[i];\r\n        }\r\n        else if (args[i] && (typeof args[i + 1] === 'function')) {\r\n          return args[i + 1]();\r\n        } \r\n        else if (args[i]) {\r\n          return args[i + 1];\r\n        } \r\n      }\r\n    }\r\n  },\r\n\r\n  digit: function(char) {\r\n    const digits = [0,1,2,3,4,5,6,7,8,9];\r\n    const isDigit = digits.includes(char);\r\n    return isDigit;\r\n  },\r\n\r\n  drop: function(num, item) {\r\n      if (typeof num === 'number' && (typeof item === 'string' || Array.isArray(item))) {\r\n        return item.slice(num)\r\n      }\r\n      else {\r\n          throw new TypeError(`Expected: (number, (string or array))\\n Actual: (${typeof num}, ${typeof item})`)\r\n      }\r\n  },\r\n\r\n  empty: function(item) {\r\n    const isEmpty = item.length === 0\r\n    if (typeof item === 'string' || Array.isArray(item)) {\r\n      return isEmpty;\r\n    }\r\n    else if (typeof item === 'object') {\r\n      for (prop in item) {\r\n        if (item.hasOwnProperty(prop)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected a string, array, or object.\\n Actual: ${typeof item}`);\r\n    }\r\n  },\r\n\r\n  even: function(num) {\r\n    if (typeof num === 'number') {\r\n      return num % 2 === 0;\r\n    }\r\n    else if (Array.isArray(num)) {\r\n      throw new TypeError('Expected: number.\\n Actual: array');\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: number.\\n Actual: ${typeof num}`);\r\n    }\r\n  },\r\n\r\n  flattenAll: function(...arrays) {\r\n    let levelArray = [];\r\n    for (let i = 0; i < arrays.length; i++) {\r\n        if(!Array.isArray(arrays[i])) {\r\n            levelArray.push(arrays[i]);\r\n            continue;\r\n        }\r\n        let newArray = arrays[i].flat(Infinity);\r\n        levelArray.push(newArray);\r\n    }\r\n    let flatArray = levelArray.flat();\r\n    return flatArray;\r\n  },\r\n\r\n  freeze: function(item) {\r\n    if (item === null) {\r\n      throw new TypeError('Expected: object or array.\\n Cannot freeze null value');\r\n    }\r\n    else if (typeof item === 'object' || Array.isArray(item)) {\r\n      Object.freeze(item);\r\n\r\n      Object.getOwnPropertyNames(item).forEach(prop => {\r\n        if (item.hasOwnProperty(prop)\r\n        && item[prop] !== null\r\n        && (typeof item[prop] === \"object\" || typeof item[prop] === \"function\")\r\n        && !Object.isFrozen(item[prop])) {\r\n          Object.freeze(item[prop]);\r\n        }\r\n      });\r\n      \r\n      return item;\r\n    }\r\n    else {\r\n      throw new TypeError(`Can only freeze objects.\\n Expected: 'object'\\n Actual ${typeof item}`);\r\n    }\r\n  },\r\n\r\n  frozen: function(item) {\r\n    if (typeof item === 'object') {\r\n      return Object.isFrozen(item);\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: object or array\\n Actual: ${typeof item}`)\r\n    }\r\n  },\r\n\r\n  head: function(item) {\r\n      if ((typeof item === 'string' || Array.isArray(item)) && item !== '' && item !== []) {\r\n        return item[0]\r\n      }\r\n      else if ((typeof item === 'string' || Array.isArray(item)) && (item === '' || item === [])) {\r\n          throw new Error(`Empty input:\\nCannot retrieve head of empty string or array`);\r\n      }\r\n      else {\r\n          throw new TypeError(`Expected: string or array\\n Actual: ${typeof item}`);\r\n      }\r\n  },\r\n\r\n  ifThen: function(cond, callback) {\r\n    if (cond && (typeof callback === 'function')) {\r\n      return callback();\r\n    } else if (cond) {\r\n      return callback;\r\n    } else {\r\n      return null;\r\n    }\r\n  },\r\n\r\n  ifThenElse: function(cond, callback, elseCallback) {\r\n    if (cond && (typeof callback === 'function')) {\r\n      return callback();\r\n    } else if (cond) {\r\n      return callback;\r\n    } else if (!cond && (typeof elseCallback === 'function')) {\r\n        return elseCallback();\r\n    } else {\r\n      return elseCallback;\r\n    }\r\n  },\r\n\r\n  init: function(item) {\r\n    if ((typeof item === 'string' || Array.isArray(item)) && item !== '' && item !== []) {\r\n      return item.slice(0, item.length - 1);\r\n    }\r\n    else if ((typeof item === 'string' || Array.isArray(item)) && (item === '' || item === [])) {\r\n        throw new Error(`Empty input:\\nCannot retrieve init of empty string or array`);\r\n    }\r\n    else {\r\n        throw new TypeError(`Expected: string or array\\n Actual: ${typeof item}`);\r\n    }\r\n  },\r\n\r\n  input: function(prompt) {\r\n    const userInput = readlineSync.question(prompt);\r\n    return userInput;\r\n  },\r\n\r\n  integer: function(item) {\r\n    return Number.isInteger(item);\r\n  },\r\n\r\n  is: function(item) {\r\n    return item;\r\n  },\r\n\r\n  last: function(item) {\r\n    if ((typeof item === 'string' || Array.isArray(item)) && item !== '' && item !== []) {\r\n      return item[item.length - 1];\r\n    }\r\n    else if ((typeof item === 'string' || Array.isArray(item)) && (item === '' || item === [])) {\r\n        throw new Error(`Empty input:\\nCannot retrieve last of empty string or array`);\r\n    }\r\n    else {\r\n        throw new TypeError(`Expected: string or array\\n Actual: ${typeof item}`);\r\n    }\r\n    },\r\n\r\n  nil: function(item) {\r\n    const isNil = item === null || item === undefined;\r\n    return isNil;\r\n  },\r\n\r\n  not: function(bool) {\r\n    if (typeof bool === 'boolean') {\r\n      return !bool;\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: boolean\\n Actual: ${typeof bool}`);\r\n    }\r\n  },\r\n\r\n  number: function(item) {\r\n    const isNumber = typeof item === 'number' && !isNaN(item);\r\n    return isNumber;\r\n  },\r\n\r\n  odd: function(num) {\r\n    if (typeof num === 'number') {\r\n      return num % 2 !== 0;\r\n    }\r\n    else if (Array.isArray(num)) {\r\n      throw new TypeError('Expected: number.\\n Actual: array');\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: number.\\n Actual: ${typeof num}`);\r\n    }\r\n  },\r\n\r\n  onlyDigits: function (string) {\r\n    if (typeof string === 'string') {\r\n      let digitsOnly = string.replace(/[^\\d]/g, '');\r\n      return digitsOnly;\r\n    }\r\n    else if (Array.isArray(string)) {\r\n      throw new TypeError('Expected: number.\\n Actual: array');\r\n    }\r\n    else {\r\n      throw new TypeError(`@onlyDigits\\nExpected: string\\n Actual: ${typeof string}`);\r\n    }\r\n  },\r\n\r\n  onlyLetters: function (string) {\r\n    if (typeof string === 'string') {\r\n      let newString = string.replace(/[^a-zA-z]/g, '');\r\n      return newString;\r\n    }\r\n    else if (Array.isArray(string)) {\r\n      throw new TypeError('Expected: number.\\n Actual: array');\r\n    }\r\n    else {\r\n      throw new TypeError(`@onlyLetters\\nExpected: string\\n Actual: ${typeof string}`);\r\n    }\r\n  },\r\n\r\n  print: function(item) {\r\n    console.log(item);\r\n  },\r\n  \r\n  randomInt: function(min, max) {\r\n    if (typeof min === 'number' && typeof max === 'number') {\r\n      return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: (number, number)\\n Actual: (${typeof min}, ${typeof max})`);\r\n    }\r\n  },\r\n\r\n  randomChoice: function(array) {\r\n    if (Array.isArray(array)) {\r\n      let chosenInt = Math.floor(Math.random() * array.length);\r\n      return array[chosenInt];\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected array:\\n Actual: ${typeof array}`);\r\n    }\r\n  },\r\n\r\n  range: function(firstNumber, secondNumber) {\r\n    if (typeof firstNumber !== 'number' || typeof secondNumber !== 'number') {\r\n      throw new TypeError(`Expected: (number, number)\\n Actual: (${typeof firstNumber}, ${typeof secondNumber})`);\r\n    }\r\n \r\n    if (firstNumber < 0 && secondNumber === undefined) {\r\n      secondNumber = 0;\r\n      return makeArray(firstNumber, secondNumber);\r\n    } \r\n    \r\n    else if (secondNumber === undefined) {\r\n      secondNumber = firstNumber;\r\n      firstNumber = 0;\r\n      return makeArray(firstNumber, secondNumber);\r\n    } \r\n    \r\n    else if (firstNumber <= secondNumber) {\r\n      return makeArray(firstNumber, secondNumber);\r\n    } \r\n    \r\n    else if (firstNumber >= secondNumber) {\r\n      return makeReverseArray(firstNumber, secondNumber);\r\n    }\r\n\r\n    return rangeArray;\r\n  },\r\n\r\n\r\n  reverse: function(item) {\r\n    if (Array.isArray(item)) {\r\n      return item.reverse();\r\n    } \r\n    else if (typeof item === 'string') {\r\n      let newWord = item.split('').reverse().join('');\r\n      return newWord;\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: string or array\\n Actual: ${typeof item}`);\r\n    }\r\n  },\r\n\r\n\r\n  seal: function(item) {\r\n    if (item === null) {\r\n      throw new TypeError('Expected: object or array.\\n Cannot seal null value');\r\n    }\r\n    else if (typeof item === 'object' || Array.isArray(item)) {\r\n      return Object.seal(item);\r\n    }\r\n    else {\r\n      throw new TypeError(`Can only seal objects.\\n Expected: 'object'\\n Actual ${typeof item}`);\r\n    }\r\n  },\r\n\r\n  shuffle: function(array) {\r\n    if (Array.isArray(array)) {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n    return array;\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: array\\n Actual: ${typeof array}`);\r\n    }\r\n  },\r\n\r\n  splitEvery: function(num, array) {\r\n      if (typeof num === 'number' && Array.isArray(array)) {\r\n        let splitArray = []\r\n        let currentArray = []\r\n        for (let i = 1; i < array.length + 1; i++) {\r\n          currentArray.push(array[i - 1])\r\n          if (i % num === 0) {\r\n              splitArray.push(currentArray)\r\n              currentArray = []\r\n          } \r\n          else if (i === array.length) {\r\n              splitArray.push(currentArray)\r\n          }\r\n        }\r\n        return splitArray\r\n      }\r\n      else if (Array.isArray(num), Array.isArray(array)){\r\n          return `Expected: (number, array)\\n Actual: (array, array)`\r\n      }\r\n      else if (!Array.isArray(num), Array.isArray(array)) {\r\n        return `Expected: (number, array)\\n Actual: (${typeof num}, array)`\r\n      }\r\n      else {\r\n        return `Expected: (number, array)\\n Actual: (${typeof num}, ${typeof array})`\r\n      }\r\n  },\r\n\r\n  sum: function(...numbers) {\r\n    let numbersFlattened = numbers.reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\r\n\r\n    let numbersToBeSummed = numbersFlattened.map((item) => Number(item));\r\n\r\n    let sum = numbersToBeSummed.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n    return sum;\r\n  },\r\n\r\n  tail: function(item) {\r\n    if ((typeof item === 'string' || Array.isArray(item)) && item !== '' && item !== []) {\r\n      return item.slice(1, item.length);\r\n    }\r\n    else if ((typeof item === 'string' || Array.isArray(item)) && (item === '' || item === [])) {\r\n        throw new Error(`Empty input:\\nCannot retrieve init of empty string or array`);\r\n    }\r\n    else {\r\n        throw new TypeError(`Expected: string or array\\n Actual: ${typeof item}`);\r\n    }\r\n  },\r\n\r\n  take: function(number, item) {\r\n      const result = item.slice(0, number);\r\n      return result;\r\n  },\r\n\r\n  unique: function(arr) {\r\n    if (Array.isArray(arr)) {\r\n      let uniques = [];\r\n      for (item of arr) {\r\n        if(uniques.indexOf(item) === -1) {\r\n          uniques.push(item);\r\n        }\r\n      }\r\n      return uniques;\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: array\\n Actual: ${arr}`);\r\n    }\r\n  },\r\n}\r\n\r\n\r\n\r\n// Helper functions\r\n\r\n// Range helper -------------------------------------------------------------------------------\r\nfunction makeArray (firstNumber, secondNumber) {\r\n  let rangeArray = [];\r\n  for (let i = firstNumber; i <= secondNumber; i++) {\r\n      rangeArray.push(i);\r\n  }   \r\n  return rangeArray;\r\n}\r\n\r\nfunction makeReverseArray(firstNumber, secondNumber) {\r\n  let rangeArray = [];\r\n  for (let i = firstNumber; i >= secondNumber; i--) {\r\n      rangeArray.push(i);\r\n  }\r\n  return rangeArray;\r\n}\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nmodule.exports = ezRead","'use strict'\n\nimport {shuffle,seal} from 'ez-read' ;\n\nconst front1 = require('./sprites/front-1.png');\nconst front2 = require('./sprites/front-2.png');\nconst front3 = require('./sprites/front-3.png');\nconst front4 = require('./sprites/front-4.png');\nconst front5 = require('./sprites/front-5.png');\nconst back = require('./sprites/card-back.png');\n\nconst cardContainer =  document.querySelector('.card-container');\nconst newGameButton = document.querySelector('.new-game');\nconst scoreBoard = document.querySelector('.score');\nconst winMessage = document.querySelector('.win-message');\n\nconst cardFrontArray = seal([\n    front1,\n    front1,\n    front2,\n    front2,\n    front3,\n    front3,\n    front4,\n    front4,\n    front5,\n    front5,\n])\n\nconst shuffledCardFronts = shuffle(cardFrontArray);\n\nexport{\n    cardContainer,\n    newGameButton,\n    shuffledCardFronts,\n    back,\n    scoreBoard,\n    winMessage,\n\n}","import {back, shuffledCardFronts } from './model';\n\nfunction maybeFlip(cardId, cardNum, source)\n{\n     console.log(1);\n    if (source === 'http://localhost:1234/card-back.d677e786.png')\n    { \n         flipCard(cardId, cardNum)\n         return true;\n    }\n\n         return false;\n}\n\n\nfunction flipCard(cardId, cardNum)\n{  \n document.querySelector(`#${cardId}`).src = shuffledCardFronts[cardNum];\n}\n\n\nexport default maybeFlip;","\n\nfunction maybeCheckMatch(lastTwoSources)\n{\n\n    if(lastTwoSources.length === 2)\n    {\n        return checkForMatch(lastTwoSources)\n    }\n    else\n    {\n        return null;\n    }\n}\n\n\nfunction checkForMatch(lastTwoSources)\n{\n    const isMatch = lastTwoSources[0] === lastTwoSources[1];\n    return isMatch;\n}\n\nexport default maybeCheckMatch;","'use strict'\n\nimport{drop} from 'ez-read';\nimport{back, cardContainer, newGameButton, scoreBoard, winMessage, shuffledCardFronts} from'./model';\nimport maybeFlip from './flip-card';\nimport maybeCheckMatch from './check-match';\n\ncardContainer.addEventListener('click', runGame);\nnewGameButton.addEventListener('click',resetGame);\n    let lastTwoSources = [];\n    let lastTwoIds = [];\n    let score = 0;\n    \n    function runGame(event) \n{\n    const cardId = event.target.id;\n    const cardNum = Number(drop(5, cardId));\n    const source = event.target.src;\n\n    const isFlipped = maybeFlip(cardId, cardNum, source);\n\n    if (isFlipped)\n\n    {\n        lastTwoSources.push(event.target.src);\n        lastTwoIds.push(cardId);\n        const isMatch = maybeCheckMatch(lastTwoSources);\n        runMatchLogic(isMatch)\n        if(score === 5){\n            winMessage.innerHTML=\"You won!\";\n        }\n  }\n\n}\n\nfunction runMatchLogic(isMatch)\n{\n    if (isMatch === null)\n    {\n        return;\n    }\n    else if (isMatch === true)\n    {\n        score++;\n        updateDisplayScore();\n        clearTwoArrays();\n    }\n    else{\n        resetlastTwoCards();\n        clearTwoArrays();\n    }\n}\nfunction updateDisplayScore()\n{\n    scoreBoard.innerHTML = `Score: ${score}`;\n}\n\nfunction clearTwoArrays()\n{\n    lastTwoSources = [];\n    lastTwoIds = [];\n}\nfunction resetlastTwoCards()\n{\n    const card1 = document.querySelector(`#${lastTwoIds[0]}`);\n    const card2 = document.querySelector(`#${lastTwoIds[1]}`);\n    setTimeout(() => {\n        card1.src = back;\n        card2.src = back;\n    }, 500);\n}\n\nfunction resetGame(){\n    resetCards();\n    score=0;\n    scoreBoard.innerHTML='Score: 0';\n    winMessage.innerHTML= '';\n}\n\nfunction resetCards(){\n    for(let i=0; i<= 9; i++ ){\n        const img = document.querySelector(`#card-${i}`)\n        img.src=back;\n    }\n}"]}